# -*- coding: utf-8 -*-
"""Apparel Classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Inu9qbs4nHSUaQYrQCz8U1vofMkgZ744
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.x 
import tensorflow as tf
from tensorflow import keras

import numpy as np
import matplotlib.pyplot as plt

fashion_mnist = keras.datasets.fashion_mnist  # load dataset

(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()

train_images.shape

train_images[0,23,25]

train_labels[:10]

class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']

plt.figure()
plt.imshow(train_images[5])
plt.colorbar()
plt.grid(True)
plt.show()
class_names[train_labels[5]]

#Data Preprocessing.Fitting data to scale.
train_images = train_images / 255.0

test_images = test_images / 255.0

#Building a model.
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)),  # input layer (1)
    keras.layers.Dense(128, activation='relu'),  # hidden layer (2)
    keras.layers.Dense(10, activation='softmax') # output layer (3)
])

#compiling a model.
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])

model.fit(train_images, train_labels, epochs=15)  #Training the model.

test_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=1) 

print('Test accuracy:', test_acc)

predictions = model.predict(test_images)

predictions

print("Predicted : " +class_names[np.argmax(predictions[31])])
plt.figure()
plt.imshow(test_images[31])
plt.colorbar()
plt.grid(True)
plt.show()
print("Expected : " +class_names[test_labels[31]])

"""# Program to verify the Model."""

COLOR = 'white'
plt.rcParams['text.color'] = COLOR
plt.rcParams['axes.labelcolor'] = COLOR

def predict(model, image, correct_label):
  class_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',
               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']
  prediction = model.predict(np.array([image]))
  predicted_class = class_names[np.argmax(prediction)]
  print("Expected : " + class_names[correct_label])
  print("Guess : " +predicted_class)
  show_image(image)


def show_image(img):
  plt.figure()
  plt.imshow(img)#cmap=plt.cm.binary
  plt.colorbar()
  plt.grid(False)
  plt.show()


def get_number():
  while True:
    num = input("Pick a number: ")
    if num.isdigit():
      num = int(num)
      if 0 <= num <= 1000:
        return int(num)
    else:
      print("Try again...")

num = get_number()
image = test_images[num]
label = test_labels[num]
predict(model, image, label)

#Got an average accuracy of 88.2% on the test set with 10 as epochs
#Got an average accuracy of 89.1% on the test set with 15 as epochs.